{"version":3,"file":"react-component-queries.min.js","sources":["../src/utils/mergeWith.js","../src/utils/getDisplayName.js","../src/utils/shallowEqual.js","../src/componentQueries.js"],"sourcesContent":["// :: (Object, Object, (any, any) => any) => Object\nconst mergeWith = (x, y, fn) => {\n  const result = Object.assign({}, x)\n\n  Object.keys(y).forEach(key => {\n    if (x[key] && y[key]) {\n      result[key] = fn(x[key], y[key], key)\n    } else {\n      result[key] = y[key]\n    }\n  })\n\n  return result\n}\n\nexport default mergeWith\n","// :: Component => String\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\nexport default getDisplayName\n","// Taken from react-redux.  Thanks Dan!\n\nexport default function shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true\n  }\n\n  const keysA = Object.keys(objA)\n  const keysB = Object.keys(objB)\n\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n\n  // Test for A's keys different from B.\n  const hasOwn = Object.prototype.hasOwnProperty\n  for (let i = 0; i < keysA.length; i += 1) {\n    // eslint-disable-line no-plusplus\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false\n    }\n  }\n\n  return true\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport invariant from 'invariant'\nimport sizeMe from 'react-sizeme'\nimport mergeWith from './utils/mergeWith'\nimport getDisplayName from './utils/getDisplayName'\nimport shallowEqual from './utils/shallowEqual'\n\nconst defaultConfig = {\n  monitorHeight: false,\n  monitorWidth: true,\n  refreshRate: 16,\n  pure: true,\n  noPlaceholder: false,\n}\n\nconst defaultConflictResolver = (x, y) => y\n\nconst defaultSizeMeConfig = () => ({\n  monitorWidth: defaultConfig.monitorWidth,\n  monitorHeight: defaultConfig.monitorHeight,\n  refreshRate: defaultConfig.refreshRate,\n})\n\n/**\n * :: Queries -> Component -> Component\n *\n * This is a HOC that provides you with the mechanism to specify Component\n * queries. A Component query is a similar concept to media queries except it\n * operates on the Component's width/height rather than the entire viewport\n * width/height.\n */\nfunction componentQueries(...params) {\n  let queries\n  let sizeMeConfig\n  let pure\n  let conflictResolver\n\n  if (params.length === 1 && params[0].queries) {\n    queries = params[0].queries || []\n    if (params[0].sizeMeConfig) {\n      // Old school config style.\n      sizeMeConfig = params[0].sizeMeConfig || defaultSizeMeConfig()\n      pure = defaultConfig.pure // this didn't exist before, so we default it.\n    } else if (params[0].config) {\n      // New school config style.\n      pure = params[0].config.pure\n      const {\n        monitorHeight,\n        monitorWidth,\n        refreshRate,\n        refreshMode,\n        noPlaceholder,\n      } = params[0].config\n      sizeMeConfig = {\n        monitorHeight:\n          monitorHeight != null ? monitorHeight : defaultConfig.monitorHeight,\n        monitorWidth:\n          monitorWidth != null ? monitorWidth : defaultConfig.monitorWidth,\n        refreshRate:\n          refreshRate != null ? refreshRate : defaultConfig.refreshRate,\n        refreshMode:\n          refreshMode != null ? refreshMode : defaultConfig.refreshMode,\n        noPlaceholder:\n          noPlaceholder != null ? noPlaceholder : defaultConfig.noPlaceholder,\n      }\n    }\n    conflictResolver =\n      conflictResolver || params[0].conflictResolver || defaultConflictResolver\n    invariant(\n      typeof conflictResolver === 'function',\n      'The conflict resolver you provide to ComponentQueries should be a function.',\n    )\n    invariant(\n      Array.isArray(queries),\n      '\"queries\" must be provided as an array when using the complex configuration.',\n    )\n  } else {\n    queries = params\n  }\n\n  // TODO: Consider removing this check.  Perhaps it's best to just silently\n  // pass through if no queries were provided?  Maybe a development based\n  // warning would be the most useful.\n  invariant(\n    queries.length > 0,\n    'You must provide at least one query to ComponentQueries.',\n  )\n  invariant(\n    queries.filter(q => typeof q !== 'function').length === 0,\n    'All provided queries for ComponentQueries should be functions.',\n  )\n\n  // We will default out any configuration if it wasn't set.\n  sizeMeConfig = sizeMeConfig || defaultSizeMeConfig()\n  conflictResolver = conflictResolver || defaultConflictResolver\n  pure = pure != null ? pure : defaultConfig.pure\n\n  const mergeWithCustomizer = (x, y, key) => {\n    if (x === undefined) return undefined\n    return conflictResolver(x, y, key)\n  }\n\n  return function WrapComponent(WrappedComponent) {\n    class ComponentWithComponentQueries extends Component {\n      static displayName = `ComponentQueries(${getDisplayName(\n        WrappedComponent,\n      )})`\n\n      static propTypes = {\n        size: PropTypes.shape({\n          width: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n          height: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n        }).isRequired,\n      }\n\n      static WrappedComponent = WrappedComponent\n\n      state = {\n        queryResult: {},\n      }\n\n      componentWillMount() {\n        const { size, ...otherProps } = this.props\n        this.runQueries(size, otherProps)\n      }\n\n      componentWillReceiveProps(nextProps) {\n        const { size } = this.props\n        const { size: nextSize, ...nextOtherProps } = nextProps\n\n        if (!shallowEqual(size, nextSize)) {\n          this.runQueries(nextSize, nextOtherProps)\n        }\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        const {\n          size, // eslint-disable-line no-unused-vars\n          ...otherProps\n        } = this.props\n        const {\n          size: nextSize, // eslint-disable-line no-unused-vars\n          ...nextOtherProps\n        } = nextProps\n\n        return (\n          !pure ||\n          !shallowEqual(otherProps, nextOtherProps) ||\n          !shallowEqual(this.state.queryResult, nextState.queryResult)\n        )\n      }\n\n      runQueries({ width, height }, otherProps) {\n        const queryResult = queries.reduce(\n          (acc, cur) =>\n            mergeWith(\n              acc,\n              cur(\n                {\n                  width: sizeMeConfig.monitorWidth ? width : null,\n                  height: sizeMeConfig.monitorHeight ? height : null,\n                },\n                otherProps,\n              ),\n              mergeWithCustomizer,\n            ),\n          {},\n        )\n\n        this.setState({ queryResult })\n      }\n\n      render() {\n        const {\n          size, // eslint-disable-line no-unused-vars\n          ...otherProps\n        } = this.props\n\n        const allProps = mergeWith(\n          this.state.queryResult,\n          otherProps,\n          mergeWithCustomizer,\n        )\n\n        return <WrappedComponent {...allProps} />\n      }\n    }\n\n    return sizeMe(sizeMeConfig)(ComponentWithComponentQueries)\n  }\n}\n\nexport default componentQueries\n"],"names":["mergeWith","x","y","fn","result","Object","assign","keys","forEach","key","getDisplayName","WrappedComponent","displayName","name","shallowEqual","objA","objB","keysA","keysB","length","hasOwn","prototype","hasOwnProperty","i","call","defaultConfig","defaultConflictResolver","defaultSizeMeConfig","monitorWidth","monitorHeight","refreshRate","componentQueries","queries","sizeMeConfig","pure","conflictResolver","params","config","refreshMode","noPlaceholder","Array","isArray","filter","q","mergeWithCustomizer","undefined","ComponentWithComponentQueries","state","this","props","size","otherProps","runQueries","nextProps","nextSize","nextOtherProps","nextState","queryResult","width","height","reduce","acc","cur","setState","allProps","React","Component","propTypes","PropTypes","shape","number","isRequired","sizeMe"],"mappings":"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"}