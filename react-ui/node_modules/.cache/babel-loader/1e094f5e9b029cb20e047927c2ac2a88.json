{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar invariant = _interopDefault(require('invariant'));\n\nvar sizeMe = _interopDefault(require('react-sizeme')); // :: (Object, Object, (any, any) => any) => Object\n\n\nvar mergeWith = function mergeWith(x, y, fn) {\n  var result = Object.assign({}, x);\n  Object.keys(y).forEach(function (key) {\n    if (x[key] && y[key]) {\n      result[key] = fn(x[key], y[key], key);\n    } else {\n      result[key] = y[key];\n    }\n  });\n  return result;\n}; // :: Component => String\n\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n} // Taken from react-redux.  Thanks Dan!\n\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  for (var i = 0; i < keysA.length; i += 1) {\n    // eslint-disable-line no-plusplus\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar defaultConfig = {\n  monitorHeight: false,\n  monitorWidth: true,\n  refreshRate: 16,\n  pure: true,\n  noPlaceholder: false\n};\n\nvar defaultConflictResolver = function defaultConflictResolver(x, y) {\n  return y;\n};\n\nvar defaultSizeMeConfig = function defaultSizeMeConfig() {\n  return {\n    monitorWidth: defaultConfig.monitorWidth,\n    monitorHeight: defaultConfig.monitorHeight,\n    refreshRate: defaultConfig.refreshRate\n  };\n};\n/**\n * :: Queries -> Component -> Component\n *\n * This is a HOC that provides you with the mechanism to specify Component\n * queries. A Component query is a similar concept to media queries except it\n * operates on the Component's width/height rather than the entire viewport\n * width/height.\n */\n\n\nfunction componentQueries() {\n  var queries = void 0;\n  var sizeMeConfig = void 0;\n  var pure = void 0;\n  var conflictResolver = void 0;\n\n  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n    params[_key] = arguments[_key];\n  }\n\n  if (params.length === 1 && params[0].queries) {\n    queries = params[0].queries || [];\n\n    if (params[0].sizeMeConfig) {\n      // Old school config style.\n      sizeMeConfig = params[0].sizeMeConfig || defaultSizeMeConfig();\n      pure = defaultConfig.pure; // this didn't exist before, so we default it.\n    } else if (params[0].config) {\n      // New school config style.\n      pure = params[0].config.pure;\n      var _params$0$config = params[0].config,\n          monitorHeight = _params$0$config.monitorHeight,\n          monitorWidth = _params$0$config.monitorWidth,\n          refreshRate = _params$0$config.refreshRate,\n          refreshMode = _params$0$config.refreshMode,\n          noPlaceholder = _params$0$config.noPlaceholder;\n      sizeMeConfig = {\n        monitorHeight: monitorHeight != null ? monitorHeight : defaultConfig.monitorHeight,\n        monitorWidth: monitorWidth != null ? monitorWidth : defaultConfig.monitorWidth,\n        refreshRate: refreshRate != null ? refreshRate : defaultConfig.refreshRate,\n        refreshMode: refreshMode != null ? refreshMode : defaultConfig.refreshMode,\n        noPlaceholder: noPlaceholder != null ? noPlaceholder : defaultConfig.noPlaceholder\n      };\n    }\n\n    conflictResolver = conflictResolver || params[0].conflictResolver || defaultConflictResolver;\n    invariant(typeof conflictResolver === 'function', 'The conflict resolver you provide to ComponentQueries should be a function.');\n    invariant(Array.isArray(queries), '\"queries\" must be provided as an array when using the complex configuration.');\n  } else {\n    queries = params;\n  } // TODO: Consider removing this check.  Perhaps it's best to just silently\n  // pass through if no queries were provided?  Maybe a development based\n  // warning would be the most useful.\n\n\n  invariant(queries.length > 0, 'You must provide at least one query to ComponentQueries.');\n  invariant(queries.filter(function (q) {\n    return typeof q !== 'function';\n  }).length === 0, 'All provided queries for ComponentQueries should be functions.'); // We will default out any configuration if it wasn't set.\n\n  sizeMeConfig = sizeMeConfig || defaultSizeMeConfig();\n  conflictResolver = conflictResolver || defaultConflictResolver;\n  pure = pure != null ? pure : defaultConfig.pure;\n\n  var mergeWithCustomizer = function mergeWithCustomizer(x, y, key) {\n    if (x === undefined) return undefined;\n    return conflictResolver(x, y, key);\n  };\n\n  return function WrapComponent(WrappedComponent) {\n    var ComponentWithComponentQueries = function (_Component) {\n      inherits(ComponentWithComponentQueries, _Component);\n\n      function ComponentWithComponentQueries() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        classCallCheck(this, ComponentWithComponentQueries);\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ComponentWithComponentQueries.__proto__ || Object.getPrototypeOf(ComponentWithComponentQueries)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n          queryResult: {}\n        }, _temp), possibleConstructorReturn(_this, _ret);\n      }\n\n      createClass(ComponentWithComponentQueries, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n          var _props = this.props,\n              size = _props.size,\n              otherProps = objectWithoutProperties(_props, ['size']);\n          this.runQueries(size, otherProps);\n        }\n      }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n          var size = this.props.size;\n          var nextSize = nextProps.size,\n              nextOtherProps = objectWithoutProperties(nextProps, ['size']);\n\n          if (!shallowEqual(size, nextSize)) {\n            this.runQueries(nextSize, nextOtherProps);\n          }\n        }\n      }, {\n        key: 'shouldComponentUpdate',\n        value: function shouldComponentUpdate(nextProps, nextState) {\n          var _props2 = this.props,\n              size = _props2.size,\n              otherProps = objectWithoutProperties(_props2, ['size']);\n          var nextSize = nextProps.size,\n              nextOtherProps = objectWithoutProperties(nextProps, ['size']);\n          return !pure || !shallowEqual(otherProps, nextOtherProps) || !shallowEqual(this.state.queryResult, nextState.queryResult);\n        }\n      }, {\n        key: 'runQueries',\n        value: function runQueries(_ref2, otherProps) {\n          var width = _ref2.width,\n              height = _ref2.height;\n          var queryResult = queries.reduce(function (acc, cur) {\n            return mergeWith(acc, cur({\n              width: sizeMeConfig.monitorWidth ? width : null,\n              height: sizeMeConfig.monitorHeight ? height : null\n            }, otherProps), mergeWithCustomizer);\n          }, {});\n          this.setState({\n            queryResult: queryResult\n          });\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _props3 = this.props,\n              size = _props3.size,\n              otherProps = objectWithoutProperties(_props3, ['size']);\n          var allProps = mergeWith(this.state.queryResult, otherProps, mergeWithCustomizer);\n          return React__default.createElement(WrappedComponent, allProps);\n        }\n      }]);\n      return ComponentWithComponentQueries;\n    }(React.Component);\n\n    ComponentWithComponentQueries.displayName = 'ComponentQueries(' + getDisplayName(WrappedComponent) + ')';\n    ComponentWithComponentQueries.propTypes = {\n      size: PropTypes.shape({\n        width: PropTypes.number,\n        // eslint-disable-line react/no-unused-prop-types\n        height: PropTypes.number // eslint-disable-line react/no-unused-prop-types\n\n      }).isRequired\n    };\n    ComponentWithComponentQueries.WrappedComponent = WrappedComponent;\n    return sizeMe(sizeMeConfig)(ComponentWithComponentQueries);\n  };\n}\n\nmodule.exports = componentQueries;","map":null,"metadata":{},"sourceType":"script"}