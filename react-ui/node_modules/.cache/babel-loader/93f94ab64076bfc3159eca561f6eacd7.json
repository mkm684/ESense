{"ast":null,"code":"import _objectSpread from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/mohamed/projects/sap/react-reduction/src/pages/ChartPage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { getColor } from 'utils/colors';\nimport { randomNum } from 'utils/demos';\nimport { Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-plugin-streaming';\nimport Page from 'components/Page';\n\nvar ChartPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChartPage, _Component);\n\n  function ChartPage() {\n    _classCallCheck(this, ChartPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChartPage).apply(this, arguments));\n  }\n\n  _createClass(ChartPage, [{\n    key: \"render\",\n    value: function render() {\n      return ChartPage_ret();\n    }\n  }]);\n\n  return ChartPage;\n}(Component);\n\nvar MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nvar getData = function getData() {\n  var res;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('http://127.0.0.1:5000/result'));\n\n        case 3:\n          res = _context.sent;\n          console.log('got Something2');\n          return _context.abrupt(\"return\", res.data);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          alert('Oh hey. Something went wrong...');\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]]);\n};\n\nfunction createGist() {\n  fetch('http://127.0.0.1:5000/result', {\n    method: 'get'\n  }).then(function (response) {\n    console.log('got Something');\n    return response.json();\n  }).then(function (data) {\n    console.log(data);\n    return data;\n  });\n}\n\nvar genLineData = function genLineData() {\n  var moreData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var moreData2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (moreData.fill === false) {\n    var _Normal = 37;\n  } else {\n    var _Normal2 = 80;\n  }\n\n  return {\n    labels: MONTHS,\n    datasets: [_objectSpread({\n      label: 'Live',\n      backgroundColor: getColor('primary'),\n      borderColor: getColor('primary'),\n      borderWidth: 1,\n      data: []\n    }, moreData), _objectSpread({\n      label: 'Normal',\n      backgroundColor: getColor('secondary'),\n      borderColor: getColor('secondary'),\n      borderWidth: 1,\n      data: [Normal]\n    }, moreData2)]\n  };\n};\n\nvar options = {\n  scales: {\n    xAxes: [{\n      type: \"realtime\",\n      realtime: {\n        onRefresh: function onRefresh(chart) {\n          chart.data.datasets.forEach(function (dataset) {\n            dataset.data.push({\n              x: Date.now(),\n              y: Math.random()\n            });\n          });\n        },\n        delay: 2000\n      }\n    }]\n  }\n};\nvar options2 = {\n  scales: {\n    xAxes: [{\n      type: \"realtime\",\n      realtime: {\n        onRefresh: function onRefresh(chart) {\n          chart.data.datasets.forEach(function (dataset) {\n            dataset.data.push({\n              x: Date.now(),\n              y: Math.random()\n            });\n          });\n        },\n        delay: 2000\n      }\n    }]\n  }\n};\n\nvar ChartPage_ret = function ChartPage_ret() {\n  return React.createElement(Page, {\n    title: \"Charts\",\n    breadcrumbs: [{\n      name: 'Charts',\n      active: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 6,\n    lg: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Heartbeat BPM\"), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: genLineData(),\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })))), React.createElement(Col, {\n    xl: 6,\n    lg: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Temprature\"), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: genLineData({\n      fill: false\n    }, {\n      fill: false\n    }),\n    options: options2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))))));\n};\n\nexport default ChartPage;","map":{"version":3,"sources":["/home/mohamed/projects/sap/react-reduction/src/pages/ChartPage.js"],"names":["React","Component","axios","getColor","randomNum","Row","Col","Card","CardHeader","CardBody","Line","Page","ChartPage","ChartPage_ret","MONTHS","getRandomArbitrary","min","max","Math","random","getData","get","res","console","log","data","alert","createGist","fetch","method","then","response","json","genLineData","moreData","moreData2","fill","Normal","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","xAxes","type","realtime","onRefresh","chart","forEach","dataset","push","x","Date","now","y","delay","options2","name","active"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport { getColor } from 'utils/colors';\nimport { randomNum } from 'utils/demos';\n\nimport { Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\n\nimport {Line} from 'react-chartjs-2';\nimport 'chartjs-plugin-streaming';\n\nimport Page from 'components/Page';\n\nclass ChartPage extends Component{\n\n   render() { \n      return ChartPage_ret()\n   }\n}\n\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nconst getData = async () => {\n    try {\n      const res = await axios.get('http://127.0.0.1:5000/result');\n      console.log('got Something2')\n      return res.data\n    } catch (err) {\n      alert('Oh hey. Something went wrong...');\n    }\n}\n\nfunction createGist() {\n  fetch('http://127.0.0.1:5000/result', {\n      method: 'get',\n    }).then(function(response) {\n      console.log('got Something')\n      return response.json();\n    }).then(function(data) {\n      console.log(data)\n      return data\n    });\n}\n\nconst genLineData = (moreData = {}, moreData2 = {}) => {\n  if (moreData.fill === false){\n    let Normal = 37\n  }\n  else{\n    let Normal = 80\n  }\n  return {\n    labels: MONTHS,\n    datasets: [\n      {\n        label: 'Live',\n        backgroundColor: getColor('primary'),\n        borderColor: getColor('primary'),\n        borderWidth: 1,\n        data: [],\n        ...moreData,\n      },\n      {\n        label: 'Normal',\n        backgroundColor: getColor('secondary'),\n        borderColor: getColor('secondary'),\n        borderWidth: 1,\n        data: [Normal],\n        ...moreData2,\n      },\n    ],\n  };\n};\n\nconst options = {\n  scales: {\n    xAxes: [\n      {\n        type: \"realtime\",\n        realtime: {\n          onRefresh: function(chart) {\n            chart.data.datasets.forEach(function(dataset) {\n              dataset.data.push({\n                x: Date.now(),\n                y: Math.random()\n              });\n            });\n          },\n          delay: 2000\n        }\n      }\n    ]\n  }\n};\n\n\nconst options2 = {\n  scales: {\n    xAxes: [\n      {\n        type: \"realtime\",\n        realtime: {\n          onRefresh: function(chart) {\n            chart.data.datasets.forEach(function(dataset) {\n              dataset.data.push({\n                x: Date.now(),\n                y: Math.random()\n              });\n            });\n          },\n          delay: 2000\n        }\n      }\n    ]\n  }\n};\nconst ChartPage_ret = () => {\n  return (\n    <Page title=\"Charts\" breadcrumbs={[{ name: 'Charts', active: true }]}>\n      <Row>\n        <Col xl={6} lg={12} md={12}>\n          <Card>\n            <CardHeader>Heartbeat BPM</CardHeader>\n            <CardBody>\n              <Line\n                data={genLineData()}\n                options={options}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col xl={6} lg={12} md={12}>\n          <Card>\n            <CardHeader>Temprature</CardHeader>\n            <CardBody>\n              <Line \n                data={genLineData({ fill: false }, { fill: false })} \n                options={options2}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Page>\n  );\n};\n\nexport default ChartPage;\n"]},"metadata":{},"sourceType":"module"}