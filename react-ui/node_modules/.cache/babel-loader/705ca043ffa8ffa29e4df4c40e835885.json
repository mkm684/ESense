{"ast":null,"code":"'use strict';\n\nvar defaults = require('./core.defaults');\n\nvar helpers = require('../helpers/index');\n\nvar layouts = require('./core.layouts');\n\nmodule.exports = function (Chart) {\n  Chart.scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers.clone(scaleDefaults);\n    },\n    getScaleConstructor: function getScaleConstructor(type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function getScaleDefaults(type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};\n    },\n    updateScaleDefaults: function updateScaleDefaults(type, additions) {\n      var me = this;\n\n      if (me.defaults.hasOwnProperty(type)) {\n        me.defaults[type] = helpers.extend(me.defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function addScalesToLayout(chart) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers.each(chart.scales, function (scale) {\n        // Set ILayoutItem parameters for backwards compatibility\n        scale.fullWidth = scale.options.fullWidth;\n        scale.position = scale.options.position;\n        scale.weight = scale.options.weight;\n        layouts.addBox(chart, scale);\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/mohamed/projects/sap/react-reduction/node_modules/chart.js/src/core/core.scaleService.js"],"names":["defaults","require","helpers","layouts","module","exports","Chart","scaleService","constructors","registerScaleType","type","scaleConstructor","scaleDefaults","clone","getScaleConstructor","hasOwnProperty","undefined","getScaleDefaults","merge","scale","updateScaleDefaults","additions","me","extend","addScalesToLayout","chart","each","scales","fullWidth","options","position","weight","addBox"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AAEhCA,EAAAA,KAAK,CAACC,YAAN,GAAqB;AACpB;AACA;AACAC,IAAAA,YAAY,EAAE,EAHM;AAIpB;AACA;AAEA;AACAR,IAAAA,QAAQ,EAAE,EARU;AASpBS,IAAAA,iBAAiB,EAAE,2BAASC,IAAT,EAAeC,gBAAf,EAAiCC,aAAjC,EAAgD;AAClE,WAAKJ,YAAL,CAAkBE,IAAlB,IAA0BC,gBAA1B;AACA,WAAKX,QAAL,CAAcU,IAAd,IAAsBR,OAAO,CAACW,KAAR,CAAcD,aAAd,CAAtB;AACA,KAZmB;AAapBE,IAAAA,mBAAmB,EAAE,6BAASJ,IAAT,EAAe;AACnC,aAAO,KAAKF,YAAL,CAAkBO,cAAlB,CAAiCL,IAAjC,IAAyC,KAAKF,YAAL,CAAkBE,IAAlB,CAAzC,GAAmEM,SAA1E;AACA,KAfmB;AAgBpBC,IAAAA,gBAAgB,EAAE,0BAASP,IAAT,EAAe;AAChC;AACA,aAAO,KAAKV,QAAL,CAAce,cAAd,CAA6BL,IAA7B,IAAqCR,OAAO,CAACgB,KAAR,CAAc,EAAd,EAAkB,CAAClB,QAAQ,CAACmB,KAAV,EAAiB,KAAKnB,QAAL,CAAcU,IAAd,CAAjB,CAAlB,CAArC,GAAgG,EAAvG;AACA,KAnBmB;AAoBpBU,IAAAA,mBAAmB,EAAE,6BAASV,IAAT,EAAeW,SAAf,EAA0B;AAC9C,UAAIC,EAAE,GAAG,IAAT;;AACA,UAAIA,EAAE,CAACtB,QAAH,CAAYe,cAAZ,CAA2BL,IAA3B,CAAJ,EAAsC;AACrCY,QAAAA,EAAE,CAACtB,QAAH,CAAYU,IAAZ,IAAoBR,OAAO,CAACqB,MAAR,CAAeD,EAAE,CAACtB,QAAH,CAAYU,IAAZ,CAAf,EAAkCW,SAAlC,CAApB;AACA;AACD,KAzBmB;AA0BpBG,IAAAA,iBAAiB,EAAE,2BAASC,KAAT,EAAgB;AAClC;AACAvB,MAAAA,OAAO,CAACwB,IAAR,CAAaD,KAAK,CAACE,MAAnB,EAA2B,UAASR,KAAT,EAAgB;AAC1C;AACAA,QAAAA,KAAK,CAACS,SAAN,GAAkBT,KAAK,CAACU,OAAN,CAAcD,SAAhC;AACAT,QAAAA,KAAK,CAACW,QAAN,GAAiBX,KAAK,CAACU,OAAN,CAAcC,QAA/B;AACAX,QAAAA,KAAK,CAACY,MAAN,GAAeZ,KAAK,CAACU,OAAN,CAAcE,MAA7B;AACA5B,QAAAA,OAAO,CAAC6B,MAAR,CAAeP,KAAf,EAAsBN,KAAtB;AACA,OAND;AAOA;AAnCmB,GAArB;AAqCA,CAvCD","sourcesContent":["'use strict';\n\nvar defaults = require('./core.defaults');\nvar helpers = require('../helpers/index');\nvar layouts = require('./core.layouts');\n\nmodule.exports = function(Chart) {\n\n\tChart.scaleService = {\n\t\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t\t// use the new chart options to grab the correct scale\n\t\tconstructors: {},\n\t\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t\t// old browsers\n\n\t\t// Scale config defaults\n\t\tdefaults: {},\n\t\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\t\tthis.constructors[type] = scaleConstructor;\n\t\t\tthis.defaults[type] = helpers.clone(scaleDefaults);\n\t\t},\n\t\tgetScaleConstructor: function(type) {\n\t\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t\t},\n\t\tgetScaleDefaults: function(type) {\n\t\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\t\treturn this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};\n\t\t},\n\t\tupdateScaleDefaults: function(type, additions) {\n\t\t\tvar me = this;\n\t\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\t\tme.defaults[type] = helpers.extend(me.defaults[type], additions);\n\t\t\t}\n\t\t},\n\t\taddScalesToLayout: function(chart) {\n\t\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\t\thelpers.each(chart.scales, function(scale) {\n\t\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\t\tscale.position = scale.options.position;\n\t\t\t\tscale.weight = scale.options.weight;\n\t\t\t\tlayouts.addBox(chart, scale);\n\t\t\t});\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}