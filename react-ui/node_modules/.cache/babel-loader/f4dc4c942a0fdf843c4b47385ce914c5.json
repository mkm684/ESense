{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar PropTypes = _interopDefault(require('prop-types'));\n\nvar invariant = _interopDefault(require('invariant'));\n\nvar sizeMe = _interopDefault(require('react-sizeme')); // :: (Object, Object, (any, any) => any) => Object\n\n\nvar mergeWith = function mergeWith(x, y, fn) {\n  var result = Object.assign({}, x);\n  Object.keys(y).forEach(function (key) {\n    if (x[key] && y[key]) {\n      result[key] = fn(x[key], y[key], key);\n    } else {\n      result[key] = y[key];\n    }\n  });\n  return result;\n}; // :: Component => String\n\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n} // Taken from react-redux.  Thanks Dan!\n\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n\n  for (var i = 0; i < keysA.length; i += 1) {\n    // eslint-disable-line no-plusplus\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar defaultConfig = {\n  monitorHeight: false,\n  monitorWidth: true,\n  refreshRate: 16,\n  pure: true,\n  noPlaceholder: false\n};\n\nvar defaultConflictResolver = function defaultConflictResolver(x, y) {\n  return y;\n};\n\nvar defaultSizeMeConfig = function defaultSizeMeConfig() {\n  return {\n    monitorWidth: defaultConfig.monitorWidth,\n    monitorHeight: defaultConfig.monitorHeight,\n    refreshRate: defaultConfig.refreshRate\n  };\n};\n/**\n * :: Queries -> Component -> Component\n *\n * This is a HOC that provides you with the mechanism to specify Component\n * queries. A Component query is a similar concept to media queries except it\n * operates on the Component's width/height rather than the entire viewport\n * width/height.\n */\n\n\nfunction componentQueries() {\n  var queries = void 0;\n  var sizeMeConfig = void 0;\n  var pure = void 0;\n  var conflictResolver = void 0;\n\n  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n    params[_key] = arguments[_key];\n  }\n\n  if (params.length === 1 && params[0].queries) {\n    queries = params[0].queries || [];\n\n    if (params[0].sizeMeConfig) {\n      // Old school config style.\n      sizeMeConfig = params[0].sizeMeConfig || defaultSizeMeConfig();\n      pure = defaultConfig.pure; // this didn't exist before, so we default it.\n    } else if (params[0].config) {\n      // New school config style.\n      pure = params[0].config.pure;\n      var _params$0$config = params[0].config,\n          monitorHeight = _params$0$config.monitorHeight,\n          monitorWidth = _params$0$config.monitorWidth,\n          refreshRate = _params$0$config.refreshRate,\n          refreshMode = _params$0$config.refreshMode,\n          noPlaceholder = _params$0$config.noPlaceholder;\n      sizeMeConfig = {\n        monitorHeight: monitorHeight != null ? monitorHeight : defaultConfig.monitorHeight,\n        monitorWidth: monitorWidth != null ? monitorWidth : defaultConfig.monitorWidth,\n        refreshRate: refreshRate != null ? refreshRate : defaultConfig.refreshRate,\n        refreshMode: refreshMode != null ? refreshMode : defaultConfig.refreshMode,\n        noPlaceholder: noPlaceholder != null ? noPlaceholder : defaultConfig.noPlaceholder\n      };\n    }\n\n    conflictResolver = conflictResolver || params[0].conflictResolver || defaultConflictResolver;\n    invariant(typeof conflictResolver === 'function', 'The conflict resolver you provide to ComponentQueries should be a function.');\n    invariant(Array.isArray(queries), '\"queries\" must be provided as an array when using the complex configuration.');\n  } else {\n    queries = params;\n  } // TODO: Consider removing this check.  Perhaps it's best to just silently\n  // pass through if no queries were provided?  Maybe a development based\n  // warning would be the most useful.\n\n\n  invariant(queries.length > 0, 'You must provide at least one query to ComponentQueries.');\n  invariant(queries.filter(function (q) {\n    return typeof q !== 'function';\n  }).length === 0, 'All provided queries for ComponentQueries should be functions.'); // We will default out any configuration if it wasn't set.\n\n  sizeMeConfig = sizeMeConfig || defaultSizeMeConfig();\n  conflictResolver = conflictResolver || defaultConflictResolver;\n  pure = pure != null ? pure : defaultConfig.pure;\n\n  var mergeWithCustomizer = function mergeWithCustomizer(x, y, key) {\n    if (x === undefined) return undefined;\n    return conflictResolver(x, y, key);\n  };\n\n  return function WrapComponent(WrappedComponent) {\n    var ComponentWithComponentQueries = function (_Component) {\n      inherits(ComponentWithComponentQueries, _Component);\n\n      function ComponentWithComponentQueries() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        classCallCheck(this, ComponentWithComponentQueries);\n\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ComponentWithComponentQueries.__proto__ || Object.getPrototypeOf(ComponentWithComponentQueries)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n          queryResult: {}\n        }, _temp), possibleConstructorReturn(_this, _ret);\n      }\n\n      createClass(ComponentWithComponentQueries, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n          var _props = this.props,\n              size = _props.size,\n              otherProps = objectWithoutProperties(_props, ['size']);\n          this.runQueries(size, otherProps);\n        }\n      }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps) {\n          var size = this.props.size;\n          var nextSize = nextProps.size,\n              nextOtherProps = objectWithoutProperties(nextProps, ['size']);\n\n          if (!shallowEqual(size, nextSize)) {\n            this.runQueries(nextSize, nextOtherProps);\n          }\n        }\n      }, {\n        key: 'shouldComponentUpdate',\n        value: function shouldComponentUpdate(nextProps, nextState) {\n          var _props2 = this.props,\n              size = _props2.size,\n              otherProps = objectWithoutProperties(_props2, ['size']);\n          var nextSize = nextProps.size,\n              nextOtherProps = objectWithoutProperties(nextProps, ['size']);\n          return !pure || !shallowEqual(otherProps, nextOtherProps) || !shallowEqual(this.state.queryResult, nextState.queryResult);\n        }\n      }, {\n        key: 'runQueries',\n        value: function runQueries(_ref2, otherProps) {\n          var width = _ref2.width,\n              height = _ref2.height;\n          var queryResult = queries.reduce(function (acc, cur) {\n            return mergeWith(acc, cur({\n              width: sizeMeConfig.monitorWidth ? width : null,\n              height: sizeMeConfig.monitorHeight ? height : null\n            }, otherProps), mergeWithCustomizer);\n          }, {});\n          this.setState({\n            queryResult: queryResult\n          });\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _props3 = this.props,\n              size = _props3.size,\n              otherProps = objectWithoutProperties(_props3, ['size']);\n          var allProps = mergeWith(this.state.queryResult, otherProps, mergeWithCustomizer);\n          return React__default.createElement(WrappedComponent, allProps);\n        }\n      }]);\n      return ComponentWithComponentQueries;\n    }(React.Component);\n\n    ComponentWithComponentQueries.displayName = 'ComponentQueries(' + getDisplayName(WrappedComponent) + ')';\n    ComponentWithComponentQueries.propTypes = {\n      size: PropTypes.shape({\n        width: PropTypes.number,\n        // eslint-disable-line react/no-unused-prop-types\n        height: PropTypes.number // eslint-disable-line react/no-unused-prop-types\n\n      }).isRequired\n    };\n    ComponentWithComponentQueries.WrappedComponent = WrappedComponent;\n    return sizeMe(sizeMeConfig)(ComponentWithComponentQueries);\n  };\n}\n\nmodule.exports = componentQueries;","map":{"version":3,"sources":["../src/utils/mergeWith.js","../src/utils/getDisplayName.js","../src/utils/shallowEqual.js","../src/componentQueries.js"],"names":["mergeWith","result","Object","x","y","fn","WrappedComponent","objA","keysA","keysB","hasOwn","i","objB","defaultConfig","defaultConflictResolver","defaultSizeMeConfig","refreshRate","params","queries","sizeMeConfig","pure","conflictResolver","monitorHeight","monitorWidth","refreshMode","noPlaceholder","Array","mergeWithCustomizer","ComponentWithComponentQueries","Component","getDisplayName","PropTypes","isRequired","size","otherProps","nextSize","nextOtherProps","nextProps","shallowEqual","nextState","width","height","queryResult","allProps","React","sizeMe"],"mappings":"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","sourcesContent":["// :: (Object, Object, (any, any) => any) => Object\nconst mergeWith = (x, y, fn) => {\n  const result = Object.assign({}, x)\n\n  Object.keys(y).forEach(key => {\n    if (x[key] && y[key]) {\n      result[key] = fn(x[key], y[key], key)\n    } else {\n      result[key] = y[key]\n    }\n  })\n\n  return result\n}\n\nexport default mergeWith\n","// :: Component => String\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\nexport default getDisplayName\n","// Taken from react-redux.  Thanks Dan!\n\nexport default function shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true\n  }\n\n  const keysA = Object.keys(objA)\n  const keysB = Object.keys(objB)\n\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n\n  // Test for A's keys different from B.\n  const hasOwn = Object.prototype.hasOwnProperty\n  for (let i = 0; i < keysA.length; i += 1) {\n    // eslint-disable-line no-plusplus\n    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false\n    }\n  }\n\n  return true\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport invariant from 'invariant'\nimport sizeMe from 'react-sizeme'\nimport mergeWith from './utils/mergeWith'\nimport getDisplayName from './utils/getDisplayName'\nimport shallowEqual from './utils/shallowEqual'\n\nconst defaultConfig = {\n  monitorHeight: false,\n  monitorWidth: true,\n  refreshRate: 16,\n  pure: true,\n  noPlaceholder: false,\n}\n\nconst defaultConflictResolver = (x, y) => y\n\nconst defaultSizeMeConfig = () => ({\n  monitorWidth: defaultConfig.monitorWidth,\n  monitorHeight: defaultConfig.monitorHeight,\n  refreshRate: defaultConfig.refreshRate,\n})\n\n/**\n * :: Queries -> Component -> Component\n *\n * This is a HOC that provides you with the mechanism to specify Component\n * queries. A Component query is a similar concept to media queries except it\n * operates on the Component's width/height rather than the entire viewport\n * width/height.\n */\nfunction componentQueries(...params) {\n  let queries\n  let sizeMeConfig\n  let pure\n  let conflictResolver\n\n  if (params.length === 1 && params[0].queries) {\n    queries = params[0].queries || []\n    if (params[0].sizeMeConfig) {\n      // Old school config style.\n      sizeMeConfig = params[0].sizeMeConfig || defaultSizeMeConfig()\n      pure = defaultConfig.pure // this didn't exist before, so we default it.\n    } else if (params[0].config) {\n      // New school config style.\n      pure = params[0].config.pure\n      const {\n        monitorHeight,\n        monitorWidth,\n        refreshRate,\n        refreshMode,\n        noPlaceholder,\n      } = params[0].config\n      sizeMeConfig = {\n        monitorHeight:\n          monitorHeight != null ? monitorHeight : defaultConfig.monitorHeight,\n        monitorWidth:\n          monitorWidth != null ? monitorWidth : defaultConfig.monitorWidth,\n        refreshRate:\n          refreshRate != null ? refreshRate : defaultConfig.refreshRate,\n        refreshMode:\n          refreshMode != null ? refreshMode : defaultConfig.refreshMode,\n        noPlaceholder:\n          noPlaceholder != null ? noPlaceholder : defaultConfig.noPlaceholder,\n      }\n    }\n    conflictResolver =\n      conflictResolver || params[0].conflictResolver || defaultConflictResolver\n    invariant(\n      typeof conflictResolver === 'function',\n      'The conflict resolver you provide to ComponentQueries should be a function.',\n    )\n    invariant(\n      Array.isArray(queries),\n      '\"queries\" must be provided as an array when using the complex configuration.',\n    )\n  } else {\n    queries = params\n  }\n\n  // TODO: Consider removing this check.  Perhaps it's best to just silently\n  // pass through if no queries were provided?  Maybe a development based\n  // warning would be the most useful.\n  invariant(\n    queries.length > 0,\n    'You must provide at least one query to ComponentQueries.',\n  )\n  invariant(\n    queries.filter(q => typeof q !== 'function').length === 0,\n    'All provided queries for ComponentQueries should be functions.',\n  )\n\n  // We will default out any configuration if it wasn't set.\n  sizeMeConfig = sizeMeConfig || defaultSizeMeConfig()\n  conflictResolver = conflictResolver || defaultConflictResolver\n  pure = pure != null ? pure : defaultConfig.pure\n\n  const mergeWithCustomizer = (x, y, key) => {\n    if (x === undefined) return undefined\n    return conflictResolver(x, y, key)\n  }\n\n  return function WrapComponent(WrappedComponent) {\n    class ComponentWithComponentQueries extends Component {\n      static displayName = `ComponentQueries(${getDisplayName(\n        WrappedComponent,\n      )})`\n\n      static propTypes = {\n        size: PropTypes.shape({\n          width: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n          height: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\n        }).isRequired,\n      }\n\n      static WrappedComponent = WrappedComponent\n\n      state = {\n        queryResult: {},\n      }\n\n      componentWillMount() {\n        const { size, ...otherProps } = this.props\n        this.runQueries(size, otherProps)\n      }\n\n      componentWillReceiveProps(nextProps) {\n        const { size } = this.props\n        const { size: nextSize, ...nextOtherProps } = nextProps\n\n        if (!shallowEqual(size, nextSize)) {\n          this.runQueries(nextSize, nextOtherProps)\n        }\n      }\n\n      shouldComponentUpdate(nextProps, nextState) {\n        const {\n          size, // eslint-disable-line no-unused-vars\n          ...otherProps\n        } = this.props\n        const {\n          size: nextSize, // eslint-disable-line no-unused-vars\n          ...nextOtherProps\n        } = nextProps\n\n        return (\n          !pure ||\n          !shallowEqual(otherProps, nextOtherProps) ||\n          !shallowEqual(this.state.queryResult, nextState.queryResult)\n        )\n      }\n\n      runQueries({ width, height }, otherProps) {\n        const queryResult = queries.reduce(\n          (acc, cur) =>\n            mergeWith(\n              acc,\n              cur(\n                {\n                  width: sizeMeConfig.monitorWidth ? width : null,\n                  height: sizeMeConfig.monitorHeight ? height : null,\n                },\n                otherProps,\n              ),\n              mergeWithCustomizer,\n            ),\n          {},\n        )\n\n        this.setState({ queryResult })\n      }\n\n      render() {\n        const {\n          size, // eslint-disable-line no-unused-vars\n          ...otherProps\n        } = this.props\n\n        const allProps = mergeWith(\n          this.state.queryResult,\n          otherProps,\n          mergeWithCustomizer,\n        )\n\n        return <WrappedComponent {...allProps} />\n      }\n    }\n\n    return sizeMe(sizeMeConfig)(ComponentWithComponentQueries)\n  }\n}\n\nexport default componentQueries\n"]},"metadata":{},"sourceType":"script"}