{"ast":null,"code":"import _objectSpread from \"/home/mohamed/projects/sap/react-reduction/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mohamed/projects/sap/react-reduction/src/pages/ChartPage.js\";\nimport React from 'react';\nimport { getColor } from 'utils/colors';\nimport { randomNum } from 'utils/demos';\nimport { Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\nimport { Line } from 'react-chartjs-2';\nimport Page from 'components/Page';\nvar MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\nvar getData = function getData() {\n  // create a new XMLHttpRequest\n  var xhr = new XMLHttpRequest(); // get a callback when the server responds\n\n  xhr.addEventListener('load', function () {\n    // update the state of the component with the result here\n    console.log(xhr.responseText);\n  }); // open the request with the verb and the url\n\n  xhr.open('GET', 'http://127.0.0.1:5000/result'); // send the request\n\n  xhr.send();\n};\n\nvar genLineData = function genLineData() {\n  var moreData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var moreData2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    labels: MONTHS,\n    datasets: [{\n      label: 'Dataset 1',\n      backgroundColor: getColor('primary'),\n      borderColor: getColor('primary'),\n      borderWidth: 1,\n      data: [100, 200, 300, 400, 500, 600]\n    }, _objectSpread({\n      label: 'Dataset 2',\n      backgroundColor: getColor('secondary'),\n      borderColor: getColor('secondary'),\n      borderWidth: 1,\n      data: [randomNum(), randomNum(), randomNum(), randomNum(), randomNum(), randomNum(), randomNum()]\n    }, moreData2)]\n  };\n};\n\nvar ChartPage = function ChartPage() {\n  return React.createElement(Page, {\n    title: \"Charts\",\n    breadcrumbs: [{\n      name: 'Charts',\n      active: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 6,\n    lg: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Stacked Line\"), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: genLineData(),\n    options: {\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Month'\n          }\n        }],\n        yAxes: [{\n          stacked: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Value'\n          }\n        }]\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })))), React.createElement(Col, {\n    xl: 6,\n    lg: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Line\"), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Line, {\n    data: genLineData({\n      fill: false\n    }, {\n      fill: false\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))))));\n};\n\nexport default ChartPage;","map":{"version":3,"sources":["/home/mohamed/projects/sap/react-reduction/src/pages/ChartPage.js"],"names":["React","getColor","randomNum","Row","Col","Card","CardHeader","CardBody","Line","Page","MONTHS","getData","xhr","XMLHttpRequest","addEventListener","console","log","responseText","open","send","genLineData","moreData","moreData2","labels","datasets","label","backgroundColor","borderColor","borderWidth","data","ChartPage","name","active","scales","xAxes","scaleLabel","display","labelString","yAxes","stacked","fill"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,QAArC,QAAqD,YAArD;AAEA,SAAQC,IAAR,QAAmB,iBAAnB;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,IAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CAAf;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB;AACA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV,CAFoB,CAIpB;;AACAD,EAAAA,GAAG,CAACE,gBAAJ,CAAqB,MAArB,EAA6B,YAAM;AACjC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,YAAhB;AACD,GAHD,EALoB,CASpB;;AACAL,EAAAA,GAAG,CAACM,IAAJ,CAAS,KAAT,EAAgB,8BAAhB,EAVoB,CAWpB;;AACAN,EAAAA,GAAG,CAACO,IAAJ;AACD,CAbD;;AAeA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAmC;AAAA,MAAlCC,QAAkC,uEAAvB,EAAuB;AAAA,MAAnBC,SAAmB,uEAAP,EAAO;AACrD,SAAO;AACLC,IAAAA,MAAM,EAAEb,MADH;AAELc,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,WADT;AAEEC,MAAAA,eAAe,EAAEzB,QAAQ,CAAC,SAAD,CAF3B;AAGE0B,MAAAA,WAAW,EAAE1B,QAAQ,CAAC,SAAD,CAHvB;AAIE2B,MAAAA,WAAW,EAAE,CAJf;AAKEC,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB;AALR,KADQ;AASNJ,MAAAA,KAAK,EAAE,WATD;AAUNC,MAAAA,eAAe,EAAEzB,QAAQ,CAAC,WAAD,CAVnB;AAWN0B,MAAAA,WAAW,EAAE1B,QAAQ,CAAC,WAAD,CAXf;AAYN2B,MAAAA,WAAW,EAAE,CAZP;AAaNC,MAAAA,IAAI,EAAE,CACJ3B,SAAS,EADL,EAEJA,SAAS,EAFL,EAGJA,SAAS,EAHL,EAIJA,SAAS,EAJL,EAKJA,SAAS,EALL,EAMJA,SAAS,EANL,EAOJA,SAAS,EAPL;AAbA,OAsBHoB,SAtBG;AAFL,GAAP;AA4BD,CA7BD;;AA+BA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,QAAZ;AAAqB,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,EAAhB;AAAoB,IAAA,EAAE,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEZ,WAAW,EADnB;AAEE,IAAA,OAAO,EAAE;AACPa,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,UAAU,EAAE;AACVC,YAAAA,OAAO,EAAE,IADC;AAEVC,YAAAA,WAAW,EAAE;AAFH;AADd,SADK,CADD;AASNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,OAAO,EAAE,IADX;AAEEJ,UAAAA,UAAU,EAAE;AACVC,YAAAA,OAAO,EAAE,IADC;AAEVC,YAAAA,WAAW,EAAE;AAFH;AAFd,SADK;AATD;AADD,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,CADF,EAiCE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,EAAhB;AAAoB,IAAA,EAAE,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEjB,WAAW,CAAC;AAAEoB,MAAAA,IAAI,EAAE;AAAR,KAAD,EAAkB;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAlB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,CAjCF,CADF,CADF;AA8CD,CA/CD;;AAiDA,eAAeV,SAAf","sourcesContent":["import React from 'react';\n\nimport { getColor } from 'utils/colors';\nimport { randomNum } from 'utils/demos';\n\nimport { Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\n\nimport {Line} from 'react-chartjs-2';\n\nimport Page from 'components/Page';\n\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\nconst getData = () => {\n  // create a new XMLHttpRequest\n  var xhr = new XMLHttpRequest()\n\n  // get a callback when the server responds\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    console.log(xhr.responseText)\n  })\n  // open the request with the verb and the url\n  xhr.open('GET', 'http://127.0.0.1:5000/result')\n  // send the request\n  xhr.send()\n}\n\nconst genLineData = (moreData = {}, moreData2 = {}) => {\n  return {\n    labels: MONTHS,\n    datasets: [\n      {\n        label: 'Dataset 1',\n        backgroundColor: getColor('primary'),\n        borderColor: getColor('primary'),\n        borderWidth: 1,\n        data: [100,200,300,400,500,600]\n      },\n      {\n        label: 'Dataset 2',\n        backgroundColor: getColor('secondary'),\n        borderColor: getColor('secondary'),\n        borderWidth: 1,\n        data: [\n          randomNum(),\n          randomNum(),\n          randomNum(),\n          randomNum(),\n          randomNum(),\n          randomNum(),\n          randomNum(),\n        ],\n        ...moreData2,\n      },\n    ],\n  };\n};\n\nconst ChartPage = () => {\n  return (\n    <Page title=\"Charts\" breadcrumbs={[{ name: 'Charts', active: true }]}>\n      <Row>\n        <Col xl={6} lg={12} md={12}>\n          <Card>\n            <CardHeader>Stacked Line</CardHeader>\n            <CardBody>\n              <Line\n                data={genLineData()}\n                options={{\n                  scales: {\n                    xAxes: [\n                      {\n                        scaleLabel: {\n                          display: true,\n                          labelString: 'Month',\n                        },\n                      },\n                    ],\n                    yAxes: [\n                      {\n                        stacked: true,\n                        scaleLabel: {\n                          display: true,\n                          labelString: 'Value',\n                        },\n                      },\n                    ],\n                  },\n                }}\n              />\n            </CardBody>\n          </Card>\n        </Col>\n\n        <Col xl={6} lg={12} md={12}>\n          <Card>\n            <CardHeader>Line</CardHeader>\n            <CardBody>\n              <Line data={genLineData({ fill: false }, { fill: false })} />\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Page>\n  );\n};\n\nexport default ChartPage;\n"]},"metadata":{},"sourceType":"module"}