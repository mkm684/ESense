{"ast":null,"code":"import _withState from 'recompose/withState';\nimport _withProps from 'recompose/withProps';\nimport _withHandlers from 'recompose/withHandlers';\nimport _compose from 'recompose/compose';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport addDays from 'date-fns/add_days';\nimport format from 'date-fns/format';\nimport isAfter from 'date-fns/is_after';\nimport isBefore from 'date-fns/is_before';\nimport { keyCodes, withImmutableProps } from '../utils';\n\nvar enhanceDay = _withProps(function (props) {\n  return {\n    isHighlighted: props.highlightedDate === props.date\n  };\n});\n\nexport var withKeyboardSupport = _compose(_withState('highlightedDate', 'setHighlight'), withImmutableProps(function (_ref) {\n  var DayComponent = _ref.DayComponent;\n  return {\n    DayComponent: enhanceDay(DayComponent)\n  };\n}), _withHandlers({\n  onKeyDown: function onKeyDown(props) {\n    return function (e) {\n      return handleKeyDown(e, props);\n    };\n  }\n}), _withProps(function (_ref2) {\n  var highlightedDate = _ref2.highlightedDate,\n      onKeyDown = _ref2.onKeyDown,\n      onSelect = _ref2.onSelect,\n      passThrough = _ref2.passThrough,\n      setHighlight = _ref2.setHighlight;\n  return {\n    passThrough: _extends({}, passThrough, {\n      Day: _extends({}, passThrough.Day, {\n        highlightedDate: format(highlightedDate, 'YYYY-MM-DD'),\n        onClick: function onClick(date) {\n          setHighlight(null);\n          passThrough.Day.onClick(date);\n        }\n      }),\n      rootNode: {\n        onKeyDown: onKeyDown\n      }\n    })\n  };\n}));\n\nfunction handleKeyDown(e, props) {\n  var minDate = props.minDate,\n      maxDate = props.maxDate,\n      onClick = props.passThrough.Day.onClick,\n      setScrollDate = props.setScrollDate,\n      setHighlight = props.setHighlight;\n  var highlightedDate = getInitialDate(props);\n  var delta = 0;\n\n  if ([keyCodes.left, keyCodes.up, keyCodes.right, keyCodes.down].indexOf(e.keyCode) > -1 && typeof e.preventDefault === 'function') {\n    e.preventDefault();\n  }\n\n  switch (e.keyCode) {\n    case keyCodes.enter:\n      onClick && onClick(highlightedDate);\n      return;\n\n    case keyCodes.left:\n      delta = -1;\n      break;\n\n    case keyCodes.right:\n      delta = +1;\n      break;\n\n    case keyCodes.down:\n      delta = +7;\n      break;\n\n    case keyCodes.up:\n      delta = -7;\n      break;\n\n    default:\n      delta = 0;\n  }\n\n  if (delta) {\n    var newHighlightedDate = addDays(highlightedDate, delta); // Make sure the new highlighted date isn't before min / max\n\n    if (isBefore(newHighlightedDate, minDate)) {\n      newHighlightedDate = new Date(minDate);\n    } else if (isAfter(newHighlightedDate, maxDate)) {\n      newHighlightedDate = new Date(maxDate);\n    }\n\n    setScrollDate(newHighlightedDate);\n    setHighlight(newHighlightedDate);\n  }\n}\n\nfunction getInitialDate(_ref3) {\n  var highlightedDate = _ref3.highlightedDate,\n      selected = _ref3.selected,\n      displayDate = _ref3.displayDate;\n  return highlightedDate || selected.start || displayDate || selected || new Date();\n}","map":null,"metadata":{},"sourceType":"module"}