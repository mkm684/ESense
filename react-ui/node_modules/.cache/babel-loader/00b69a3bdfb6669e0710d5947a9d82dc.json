{"ast":null,"code":"'use strict';\n\nvar helpers = require('./helpers.core');\n/**\n * @namespace Chart.helpers.canvas\n */\n\n\nvar exports = module.exports = {\n  /**\n   * Clears the entire canvas associated to the given `chart`.\n   * @param {Chart} chart - The chart for which to clear the canvas.\n   */\n  clear: function clear(chart) {\n    chart.ctx.clearRect(0, 0, chart.width, chart.height);\n  },\n\n  /**\n   * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n   * given size (width, height) and the same `radius` for all corners.\n   * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n   * @param {Number} x - The x axis of the coordinate for the rectangle starting point.\n   * @param {Number} y - The y axis of the coordinate for the rectangle starting point.\n   * @param {Number} width - The rectangle's width.\n   * @param {Number} height - The rectangle's height.\n   * @param {Number} radius - The rounded amount (in pixels) for the four corners.\n   * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n   */\n  roundedRect: function roundedRect(ctx, x, y, width, height, radius) {\n    if (radius) {\n      var rx = Math.min(radius, width / 2);\n      var ry = Math.min(radius, height / 2);\n      ctx.moveTo(x + rx, y);\n      ctx.lineTo(x + width - rx, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + ry);\n      ctx.lineTo(x + width, y + height - ry);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);\n      ctx.lineTo(x + rx, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - ry);\n      ctx.lineTo(x, y + ry);\n      ctx.quadraticCurveTo(x, y, x + rx, y);\n    } else {\n      ctx.rect(x, y, width, height);\n    }\n  },\n  drawPoint: function drawPoint(ctx, style, radius, x, y) {\n    var type, edgeLength, xOffset, yOffset, height, size;\n\n    if (style && typeof style === 'object') {\n      type = style.toString();\n\n      if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n        ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n        return;\n      }\n    }\n\n    if (isNaN(radius) || radius <= 0) {\n      return;\n    }\n\n    switch (style) {\n      // Default includes circle\n      default:\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'triangle':\n        ctx.beginPath();\n        edgeLength = 3 * radius / Math.sqrt(3);\n        height = edgeLength * Math.sqrt(3) / 2;\n        ctx.moveTo(x - edgeLength / 2, y + height / 3);\n        ctx.lineTo(x + edgeLength / 2, y + height / 3);\n        ctx.lineTo(x, y - 2 * height / 3);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'rect':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.beginPath();\n        ctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n        ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n        break;\n\n      case 'rectRounded':\n        var offset = radius / Math.SQRT2;\n        var leftX = x - offset;\n        var topY = y - offset;\n        var sideSize = Math.SQRT2 * radius;\n        ctx.beginPath();\n        this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'rectRot':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.beginPath();\n        ctx.moveTo(x - size, y);\n        ctx.lineTo(x, y + size);\n        ctx.lineTo(x + size, y);\n        ctx.lineTo(x, y - size);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'cross':\n        ctx.beginPath();\n        ctx.moveTo(x, y + radius);\n        ctx.lineTo(x, y - radius);\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n\n      case 'crossRot':\n        ctx.beginPath();\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x - xOffset, y + yOffset);\n        ctx.lineTo(x + xOffset, y - yOffset);\n        ctx.closePath();\n        break;\n\n      case 'star':\n        ctx.beginPath();\n        ctx.moveTo(x, y + radius);\n        ctx.lineTo(x, y - radius);\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x - xOffset, y + yOffset);\n        ctx.lineTo(x + xOffset, y - yOffset);\n        ctx.closePath();\n        break;\n\n      case 'line':\n        ctx.beginPath();\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n\n      case 'dash':\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n    }\n\n    ctx.stroke();\n  },\n  clipArea: function clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n  },\n  unclipArea: function unclipArea(ctx) {\n    ctx.restore();\n  },\n  lineTo: function lineTo(ctx, previous, target, flip) {\n    if (target.steppedLine) {\n      if (target.steppedLine === 'after' && !flip || target.steppedLine !== 'after' && flip) {\n        ctx.lineTo(previous.x, target.y);\n      } else {\n        ctx.lineTo(target.x, previous.y);\n      }\n\n      ctx.lineTo(target.x, target.y);\n      return;\n    }\n\n    if (!target.tension) {\n      ctx.lineTo(target.x, target.y);\n      return;\n    }\n\n    ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);\n  }\n}; // DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\n\nhelpers.clear = exports.clear;\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\n\nhelpers.drawRoundedRectangle = function (ctx) {\n  ctx.beginPath();\n  exports.roundedRect.apply(exports, arguments);\n  ctx.closePath();\n};","map":{"version":3,"sources":["/home/mohamed/projects/sap/react-reduction/node_modules/chart.js/src/helpers/helpers.canvas.js"],"names":["helpers","require","exports","module","clear","chart","ctx","clearRect","width","height","roundedRect","x","y","radius","rx","Math","min","ry","moveTo","lineTo","quadraticCurveTo","rect","drawPoint","style","type","edgeLength","xOffset","yOffset","size","toString","drawImage","isNaN","beginPath","arc","PI","closePath","fill","sqrt","SQRT2","fillRect","strokeRect","offset","leftX","topY","sideSize","cos","sin","stroke","clipArea","area","save","left","top","right","bottom","clip","unclipArea","restore","previous","target","flip","steppedLine","tension","bezierCurveTo","controlPointPreviousX","controlPointNextX","controlPointPreviousY","controlPointNextY","drawRoundedRectangle","apply","arguments"],"mappings":"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","sourcesContent":["'use strict';\n\nvar helpers = require('./helpers.core');\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports = module.exports = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {Number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {Number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {Number} width - The rectangle's width.\n\t * @param {Number} height - The rectangle's height.\n\t * @param {Number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\tvar rx = Math.min(radius, width / 2);\n\t\t\tvar ry = Math.min(radius, height / 2);\n\n\t\t\tctx.moveTo(x + rx, y);\n\t\t\tctx.lineTo(x + width - rx, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + ry);\n\t\t\tctx.lineTo(x + width, y + height - ry);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);\n\t\t\tctx.lineTo(x + rx, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - ry);\n\t\t\tctx.lineTo(x, y + ry);\n\t\t\tctx.quadraticCurveTo(x, y, x + rx, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y) {\n\t\tvar type, edgeLength, xOffset, yOffset, height, size;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(x, y, radius, 0, Math.PI * 2);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.beginPath();\n\t\t\tedgeLength = 3 * radius / Math.sqrt(3);\n\t\t\theight = edgeLength * Math.sqrt(3) / 2;\n\t\t\tctx.moveTo(x - edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x + edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x, y - 2 * height / 3);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\tvar offset = radius / Math.SQRT2;\n\t\t\tvar leftX = x - offset;\n\t\t\tvar topY = y - offset;\n\t\t\tvar sideSize = Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tthis.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rectRot':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - size, y);\n\t\t\tctx.lineTo(x, y + size);\n\t\t\tctx.lineTo(x + size, y);\n\t\t\tctx.lineTo(x, y - size);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'cross':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\tctx.beginPath();\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.stroke();\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tif (target.steppedLine) {\n\t\t\tif ((target.steppedLine === 'after' && !flip) || (target.steppedLine !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.clear = exports.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports.roundedRect.apply(exports, arguments);\n\tctx.closePath();\n};\n"]},"metadata":{},"sourceType":"script"}