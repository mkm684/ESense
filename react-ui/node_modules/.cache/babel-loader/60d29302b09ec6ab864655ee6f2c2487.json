{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport parse from 'date-fns/parse';\nvar styles = {\n  'root': 'Cal__Day__root',\n  'enabled': 'Cal__Day__enabled',\n  'highlighted': 'Cal__Day__highlighted',\n  'today': 'Cal__Day__today',\n  'disabled': 'Cal__Day__disabled',\n  'selected': 'Cal__Day__selected',\n  'month': 'Cal__Day__month',\n  'year': 'Cal__Day__year',\n  'selection': 'Cal__Day__selection',\n  'day': 'Cal__Day__day',\n  'range': 'Cal__Day__range',\n  'start': 'Cal__Day__start',\n  'end': 'Cal__Day__end',\n  'betweenRange': 'Cal__Day__betweenRange'\n};\n\nvar Day = function (_PureComponent) {\n  _inherits(Day, _PureComponent);\n\n  function Day() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Day);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.handleClick = function () {\n      var _this$props = _this.props,\n          date = _this$props.date,\n          isDisabled = _this$props.isDisabled,\n          onClick = _this$props.onClick;\n\n      if (!isDisabled && typeof onClick === 'function') {\n        onClick(parse(date));\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Day.prototype.renderSelection = function renderSelection(selectionColor) {\n    var _props = this.props,\n        day = _props.day,\n        date = _props.date,\n        isToday = _props.isToday,\n        todayLabel = _props.locale.todayLabel,\n        monthShort = _props.monthShort,\n        textColor = _props.theme.textColor,\n        selectionStyle = _props.selectionStyle;\n    return React.createElement('div', {\n      className: styles.selection,\n      'data-date': date,\n      style: _extends({\n        backgroundColor: this.selectionColor,\n        color: textColor.active\n      }, selectionStyle)\n    }, React.createElement('span', {\n      className: styles.month\n    }, isToday ? todayLabel.short || todayLabel.long : monthShort), React.createElement('span', {\n      className: styles.day\n    }, day));\n  };\n\n  Day.prototype.render = function render() {\n    var _classNames;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        currentYear = _props2.currentYear,\n        date = _props2.date,\n        day = _props2.day,\n        handlers = _props2.handlers,\n        isDisabled = _props2.isDisabled,\n        isHighlighted = _props2.isHighlighted,\n        isToday = _props2.isToday,\n        isSelected = _props2.isSelected,\n        monthShort = _props2.monthShort,\n        _props2$theme = _props2.theme,\n        selectionColor = _props2$theme.selectionColor,\n        todayColor = _props2$theme.todayColor,\n        year = _props2.year;\n    var color = void 0;\n\n    if (isSelected) {\n      color = this.selectionColor = typeof selectionColor === 'function' ? selectionColor(date) : selectionColor;\n    } else if (isToday) {\n      color = todayColor;\n    }\n\n    return React.createElement('li', _extends({\n      style: color ? {\n        color: color\n      } : null,\n      className: classNames(styles.root, (_classNames = {}, _classNames[styles.today] = isToday, _classNames[styles.highlighted] = isHighlighted, _classNames[styles.selected] = isSelected, _classNames[styles.disabled] = isDisabled, _classNames[styles.enabled] = !isDisabled, _classNames), className),\n      onClick: this.handleClick,\n      'data-date': date\n    }, handlers), day === 1 && React.createElement('span', {\n      className: styles.month\n    }, monthShort), isToday ? React.createElement('span', null, day) : day, day === 1 && currentYear !== year && React.createElement('span', {\n      className: styles.year\n    }, year), isSelected && this.renderSelection());\n  };\n\n  return Day;\n}(PureComponent);\n\nexport { Day as default };","map":null,"metadata":{},"sourceType":"module"}