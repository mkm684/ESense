{"ast":null,"code":"function easing(time) {\n  return 1 - --time * time * time * time;\n}\n\n;\n/**\n * Given a start/end point of a scroll and time elapsed, calculate the scroll position we should be at\n * @param {Number} start - the initial value\n * @param {Number} stop - the final desired value\n * @param {Number} elapsed - the amount of time elapsed since we started animating\n * @param {Number} - duration - the duration of the animation\n * @return {Number} - The value we should use on the next tick\n */\n\nfunction getValue(start, end, elapsed, duration) {\n  if (elapsed > duration) return end;\n  return start + (end - start) * easing(elapsed / duration);\n}\n\n;\n/**\n * Smoothly animate between two values\n * @param {Number} fromValue - the initial value\n * @param {Function} onUpdate - A function that is called on each tick\n * @param {Function} onComplete - A callback that is fired once the scroll animation ends\n * @param {Number} duration - the desired duration of the scroll animation\n */\n\nexport default function animate(_ref) {\n  var fromValue = _ref.fromValue,\n      toValue = _ref.toValue,\n      onUpdate = _ref.onUpdate,\n      onComplete = _ref.onComplete,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === undefined ? 600 : _ref$duration;\n  var startTime = performance.now();\n\n  var tick = function tick() {\n    var elapsed = performance.now() - startTime;\n    window.requestAnimationFrame(function () {\n      return onUpdate(getValue(fromValue, toValue, elapsed, duration), // Callback\n      elapsed <= duration ? tick : onComplete);\n    });\n  };\n\n  tick();\n}\n;","map":null,"metadata":{},"sourceType":"module"}