{"ast":null,"code":"import _defaultProps from 'recompose/defaultProps';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { debounce, emptyFn, range, ScrollSpeed } from '../utils';\nimport defaultDisplayOptions from '../utils/defaultDisplayOptions';\nimport defaultLocale from '../utils/defaultLocale';\nimport defaultTheme from '../utils/defaultTheme';\nimport Today, { DIRECTION_UP, DIRECTION_DOWN } from '../Today';\nimport Header from '../Header';\nimport MonthList from '../MonthList';\nimport Weekdays from '../Weekdays';\nimport Years from '../Years';\nimport Day from '../Day';\nimport parse from 'date-fns/parse';\nimport format from 'date-fns/format';\nimport startOfDay from 'date-fns/start_of_day';\nvar styles = {\n  container: {\n    'root': 'Cal__Container__root',\n    'landscape': 'Cal__Container__landscape',\n    'wrapper': 'Cal__Container__wrapper',\n    'listWrapper': 'Cal__Container__listWrapper'\n  },\n  day: {\n    'root': 'Cal__Day__root',\n    'enabled': 'Cal__Day__enabled',\n    'highlighted': 'Cal__Day__highlighted',\n    'today': 'Cal__Day__today',\n    'disabled': 'Cal__Day__disabled',\n    'selected': 'Cal__Day__selected',\n    'month': 'Cal__Day__month',\n    'year': 'Cal__Day__year',\n    'selection': 'Cal__Day__selection',\n    'day': 'Cal__Day__day',\n    'range': 'Cal__Day__range',\n    'start': 'Cal__Day__start',\n    'end': 'Cal__Day__end',\n    'betweenRange': 'Cal__Day__betweenRange'\n  }\n};\nexport var withDefaultProps = _defaultProps({\n  autoFocus: true,\n  DayComponent: Day,\n  display: 'days',\n  displayOptions: {},\n  HeaderComponent: Header,\n  height: 500,\n  keyboardSupport: true,\n  max: new Date(2050, 11, 31),\n  maxDate: new Date(2050, 11, 31),\n  min: new Date(1980, 0, 1),\n  minDate: new Date(1980, 0, 1),\n  onHighlightedDateChange: emptyFn,\n  onScroll: emptyFn,\n  onScrollEnd: emptyFn,\n  onSelect: emptyFn,\n  passThrough: {},\n  rowHeight: 56,\n  tabIndex: 1,\n  width: 400,\n  YearsComponent: Years\n});\n\nvar Calendar = function (_Component) {\n  _inherits(Calendar, _Component);\n\n  function Calendar(props) {\n    _classCallCheck(this, Calendar);\n\n    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));\n\n    _this._displayOptions = {};\n    _this._locale = {};\n    _this._theme = {};\n\n    _this.getCurrentOffset = function () {\n      return _this.scrollTop;\n    };\n\n    _this.getDateOffset = function (date) {\n      return _this._MonthList && _this._MonthList.getDateOffset(date);\n    };\n\n    _this.scrollTo = function (offset) {\n      return _this._MonthList && _this._MonthList.scrollTo(offset);\n    };\n\n    _this.scrollToDate = function () {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n      var offset = arguments[1];\n      var shouldAnimate = arguments[2];\n      var display = _this.props.display;\n      return _this._MonthList && _this._MonthList.scrollToDate(date, offset, shouldAnimate && display === 'days', function () {\n        return _this.setState({\n          isScrolling: false\n        });\n      });\n    };\n\n    _this.getScrollSpeed = new ScrollSpeed().getScrollSpeed;\n\n    _this.handleScroll = function (scrollTop, e) {\n      var _this$props = _this.props,\n          onScroll = _this$props.onScroll,\n          rowHeight = _this$props.rowHeight;\n      var isScrolling = _this.state.isScrolling;\n\n      var _this$getDisplayOptio = _this.getDisplayOptions(),\n          showTodayHelper = _this$getDisplayOptio.showTodayHelper,\n          showOverlay = _this$getDisplayOptio.showOverlay;\n\n      var scrollSpeed = _this.scrollSpeed = Math.abs(_this.getScrollSpeed(scrollTop));\n      _this.scrollTop = scrollTop; // We only want to display the months overlay if the user is rapidly scrolling\n\n      if (showOverlay && scrollSpeed > rowHeight && !isScrolling) {\n        _this.setState({\n          isScrolling: true\n        });\n      }\n\n      if (showTodayHelper) {\n        _this.updateTodayHelperPosition(scrollSpeed);\n      }\n\n      onScroll(scrollTop, e);\n\n      _this.handleScrollEnd();\n    };\n\n    _this.handleScrollEnd = debounce(function () {\n      var onScrollEnd = _this.props.onScrollEnd;\n      var isScrolling = _this.state.isScrolling;\n\n      var _this$getDisplayOptio2 = _this.getDisplayOptions(),\n          showTodayHelper = _this$getDisplayOptio2.showTodayHelper;\n\n      if (isScrolling) {\n        _this.setState({\n          isScrolling: false\n        });\n      }\n\n      if (showTodayHelper) {\n        _this.updateTodayHelperPosition(0);\n      }\n\n      onScrollEnd(_this.scrollTop);\n    }, 150);\n\n    _this.updateTodayHelperPosition = function (scrollSpeed) {\n      var today = _this.today;\n      var scrollTop = _this.scrollTop;\n      var showToday = _this.state.showToday;\n      var _this$props2 = _this.props,\n          height = _this$props2.height,\n          rowHeight = _this$props2.rowHeight;\n\n      var _this$getDisplayOptio3 = _this.getDisplayOptions(),\n          todayHelperRowOffset = _this$getDisplayOptio3.todayHelperRowOffset;\n\n      var newState = void 0;\n\n      if (!_this._todayOffset) {\n        _this._todayOffset = _this.getDateOffset(today);\n      } // Today is above the fold\n\n\n      if (scrollTop >= _this._todayOffset + (height - rowHeight) / 2 + rowHeight * todayHelperRowOffset) {\n        if (showToday !== DIRECTION_UP) newState = DIRECTION_UP;\n      } // Today is below the fold\n      else if (scrollTop <= _this._todayOffset - height / 2 - rowHeight * (todayHelperRowOffset + 1)) {\n          if (showToday !== DIRECTION_DOWN) newState = DIRECTION_DOWN;\n        } else if (showToday && scrollSpeed <= 1) {\n          newState = false;\n        }\n\n      if (scrollTop === 0) {\n        newState = false;\n      }\n\n      if (newState != null) {\n        _this.setState({\n          showToday: newState\n        });\n      }\n    };\n\n    _this.setDisplay = function (display) {\n      _this.setState({\n        display: display\n      });\n    };\n\n    _this.updateYears(props);\n\n    _this.state = {\n      display: props.display\n    };\n    return _this;\n  }\n\n  Calendar.prototype.componentDidMount = function componentDidMount() {\n    var autoFocus = this.props.autoFocus;\n\n    if (autoFocus) {\n      this.node.focus();\n    }\n  };\n\n  Calendar.prototype.componentWillUpdate = function componentWillUpdate(nextProps, nextState) {\n    var _props = this.props,\n        min = _props.min,\n        minDate = _props.minDate,\n        max = _props.max,\n        maxDate = _props.maxDate;\n\n    if (nextProps.min !== min || nextProps.minDate !== minDate || nextProps.max !== max || nextProps.maxDate !== maxDate) {\n      this.updateYears(nextProps);\n    }\n\n    if (nextProps.display !== this.props.display) {\n      this.setState({\n        display: nextProps.display\n      });\n    }\n  };\n\n  Calendar.prototype.updateYears = function updateYears() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    this._min = parse(props.min);\n    this._max = parse(props.max);\n    this._minDate = parse(props.minDate);\n    this._maxDate = parse(props.maxDate);\n\n    var min = this._min.getFullYear();\n\n    var minMonth = this._min.getMonth();\n\n    var max = this._max.getFullYear();\n\n    var maxMonth = this._max.getMonth();\n\n    var months = [];\n    var year = void 0,\n        month = void 0;\n\n    for (year = min; year <= max; year++) {\n      for (month = 0; month < 12; month++) {\n        if (year === min && month < minMonth || year === max && month > maxMonth) {\n          continue;\n        }\n\n        months.push({\n          month: month,\n          year: year\n        });\n      }\n    }\n\n    this.months = months;\n  };\n\n  Calendar.prototype.getDisabledDates = function getDisabledDates(disabledDates) {\n    return disabledDates && disabledDates.map(function (date) {\n      return format(parse(date), 'YYYY-MM-DD');\n    });\n  };\n\n  Calendar.prototype.getDisplayOptions = function getDisplayOptions() {\n    var displayOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.displayOptions;\n    return Object.assign(this._displayOptions, defaultDisplayOptions, displayOptions);\n  };\n\n  Calendar.prototype.getLocale = function getLocale() {\n    return Object.assign(this._locale, defaultLocale, this.props.locale);\n  };\n\n  Calendar.prototype.getTheme = function getTheme() {\n    return Object.assign(this._theme, defaultTheme, this.props.theme);\n  };\n\n  Calendar.prototype.render = function render() {\n    var _classNames,\n        _this2 = this;\n\n    var _props2 = this.props,\n        className = _props2.className,\n        passThrough = _props2.passThrough,\n        DayComponent = _props2.DayComponent,\n        disabledDays = _props2.disabledDays,\n        displayDate = _props2.displayDate,\n        height = _props2.height,\n        HeaderComponent = _props2.HeaderComponent,\n        rowHeight = _props2.rowHeight,\n        scrollDate = _props2.scrollDate,\n        selected = _props2.selected,\n        tabIndex = _props2.tabIndex,\n        width = _props2.width,\n        YearsComponent = _props2.YearsComponent;\n\n    var _getDisplayOptions = this.getDisplayOptions(),\n        hideYearsOnSelect = _getDisplayOptions.hideYearsOnSelect,\n        layout = _getDisplayOptions.layout,\n        overscanMonthCount = _getDisplayOptions.overscanMonthCount,\n        shouldHeaderAnimate = _getDisplayOptions.shouldHeaderAnimate,\n        showHeader = _getDisplayOptions.showHeader,\n        showMonthsForYears = _getDisplayOptions.showMonthsForYears,\n        showOverlay = _getDisplayOptions.showOverlay,\n        showTodayHelper = _getDisplayOptions.showTodayHelper,\n        showWeekdays = _getDisplayOptions.showWeekdays;\n\n    var _state = this.state,\n        display = _state.display,\n        isScrolling = _state.isScrolling,\n        showToday = _state.showToday;\n    var disabledDates = this.getDisabledDates(this.props.disabledDates);\n    var locale = this.getLocale();\n    var theme = this.getTheme();\n    var today = this.today = startOfDay(new Date());\n    return React.createElement('div', _extends({\n      tabIndex: tabIndex,\n      className: classNames(className, styles.container.root, (_classNames = {}, _classNames[styles.container.landscape] = layout === 'landscape', _classNames)),\n      style: {\n        color: theme.textColor.default,\n        width: width\n      },\n      'aria-label': 'Calendar',\n      ref: function ref(node) {\n        _this2.node = node;\n      }\n    }, passThrough.rootNode), showHeader && React.createElement(HeaderComponent, _extends({\n      selected: selected,\n      shouldAnimate: Boolean(shouldHeaderAnimate && display !== 'years'),\n      layout: layout,\n      theme: theme,\n      locale: locale,\n      scrollToDate: this.scrollToDate,\n      setDisplay: this.setDisplay,\n      dateFormat: locale.headerFormat,\n      display: display,\n      displayDate: displayDate\n    }, passThrough.Header)), React.createElement('div', {\n      className: styles.container.wrapper\n    }, showWeekdays && React.createElement(Weekdays, {\n      weekdays: locale.weekdays,\n      weekStartsOn: locale.weekStartsOn,\n      theme: theme\n    }), React.createElement('div', {\n      className: styles.container.listWrapper\n    }, showTodayHelper && React.createElement(Today, {\n      scrollToDate: this.scrollToDate,\n      show: showToday,\n      today: today,\n      theme: theme,\n      todayLabel: locale.todayLabel.long\n    }), React.createElement(MonthList, {\n      ref: function ref(instance) {\n        _this2._MonthList = instance;\n      },\n      DayComponent: DayComponent,\n      disabledDates: disabledDates,\n      disabledDays: disabledDays,\n      height: height,\n      isScrolling: isScrolling,\n      locale: locale,\n      maxDate: this._maxDate,\n      min: this._min,\n      minDate: this._minDate,\n      months: this.months,\n      onScroll: this.handleScroll,\n      overscanMonthCount: overscanMonthCount,\n      passThrough: passThrough,\n      theme: theme,\n      today: today,\n      rowHeight: rowHeight,\n      selected: selected,\n      scrollDate: scrollDate,\n      showOverlay: showOverlay,\n      width: width\n    })), display === 'years' && React.createElement(YearsComponent, _extends({\n      ref: function ref(instance) {\n        _this2._Years = instance;\n      },\n      height: height,\n      hideOnSelect: hideYearsOnSelect,\n      locale: locale,\n      max: this._max,\n      maxDate: this._maxDate,\n      min: this._min,\n      minDate: this._minDate,\n      scrollToDate: this.scrollToDate,\n      selected: selected,\n      setDisplay: this.setDisplay,\n      showMonths: showMonthsForYears,\n      theme: theme,\n      today: today,\n      width: width,\n      years: range(this._min.getFullYear(), this._max.getFullYear() + 1)\n    }, passThrough.Years))));\n  };\n\n  return Calendar;\n}(Component);\n\nexport { Calendar as default };\nprocess.env.NODE_ENV !== \"production\" ? Calendar.propTypes = {\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  DayComponent: PropTypes.func,\n  disabledDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  disabledDays: PropTypes.arrayOf(PropTypes.number),\n  display: PropTypes.oneOf(['years', 'days']),\n  displayOptions: PropTypes.shape({\n    hideYearsOnSelect: PropTypes.bool,\n    layout: PropTypes.oneOf(['portrait', 'landscape']),\n    overscanMonthCount: PropTypes.number,\n    shouldHeaderAnimate: PropTypes.bool,\n    showHeader: PropTypes.bool,\n    showMonthsForYears: PropTypes.bool,\n    showOverlay: PropTypes.bool,\n    showTodayHelper: PropTypes.bool,\n    showWeekdays: PropTypes.bool,\n    todayHelperRowOffset: PropTypes.number\n  }),\n  height: PropTypes.number,\n  keyboardSupport: PropTypes.bool,\n  locale: PropTypes.shape({\n    blank: PropTypes.string,\n    headerFormat: PropTypes.string,\n    todayLabel: PropTypes.shape({\n      long: PropTypes.string,\n      short: PropTypes.string\n    }),\n    weekdays: PropTypes.arrayOf(PropTypes.string),\n    weekStartsOn: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6])\n  }),\n  max: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  min: PropTypes.instanceOf(Date),\n  minDate: PropTypes.instanceOf(Date),\n  onScroll: PropTypes.func,\n  onScrollEnd: PropTypes.func,\n  onSelect: PropTypes.func,\n  rowHeight: PropTypes.number,\n  tabIndex: PropTypes.number,\n  theme: PropTypes.shape({\n    floatingNav: PropTypes.shape({\n      background: PropTypes.string,\n      chevron: PropTypes.string,\n      color: PropTypes.string\n    }),\n    headerColor: PropTypes.string,\n    selectionColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    textColor: PropTypes.shape({\n      active: PropTypes.string,\n      default: PropTypes.string\n    }),\n    todayColor: PropTypes.string,\n    weekdayColor: PropTypes.string\n  }),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  YearsComponent: PropTypes.func\n} : void 0;\n;","map":null,"metadata":{},"sourceType":"module"}